contMap2 <- function (tree, x, res = 100, fsize = NULL, ftype = NULL, lwd = 4, 
          legend = NULL, lims = NULL, outline = TRUE, sig = 3, type = "phylogram", 
          direction = "rightwards", plot = TRUE, ...) {
  if (!inherits(tree, "phylo")) 
    stop("tree should be an object of class \"phylo\".")
  if (hasArg(mar)) 
    mar <- list(...)$mar
  else mar <- rep(0.3, 4)
  if (hasArg(offset)) 
    offset <- list(...)$offset
  else offset <- NULL
  if (hasArg(method)) 
    method <- list(...)$method
  else method <- "fastAnc"
  if (hasArg(hold)) 
    hold <- list(...)$hold
  else hold <- TRUE
  if (hasArg(leg.txt)) 
    leg.txt <- list(...)$leg.txt
  else leg.txt <- "trait value"
  h <- max(nodeHeights(tree))
  steps <- 0:res/res * max(h)
  H <- nodeHeights(tree)
  if (method == "fastAnc") 
    a <- fastAnc(tree, x)
  else if (method == "anc.ML") {
    fit <- anc.ML(tree, x)
    a <- fit$ace
    if (!is.null(fit$missing.x)) 
      x <- c(x, fit$missing.x)
  }
  else if (method == "user") {
    if (hasArg(anc.states)) 
      anc.states <- list(...)$anc.states
    else {
      cat("No ancestral states have been provided. Using states estimated with fastAnc.\n\n")
      a <- fastAnc(tree, x)
    }
    if (length(anc.states) < tree$Nnode) {
      nodes <- as.numeric(names(anc.states))
      tt <- tree
      for (i in 1:length(nodes)) {
        M <- matchNodes(tt, tree, method = "distances")
        ii <- M[which(M[, 2] == nodes[i]), 1]
        tt <- bind.tip(tt, nodes[i], edge.length = 0, 
                       where = ii)
      }
      a <- phytools:::fastAnc(tt, c(x, anc.states))
      M <- matchNodes(tree, tt, method = "distances")
      a <- a[as.character(M[, 2])]
      names(a) <- M[, 1]
    }
    else {
      if (is.null(names(anc.states))) 
        names(anc.states) <- 1:tree$Nnode + Ntip(tree)
      a <- anc.states[as.character(1:tree$Nnode + Ntip(tree))]
    }
  }
  y <- c(a, x[tree$tip.label])
  names(y)[1:Ntip(tree) + tree$Nnode] <- 1:Ntip(tree)
  A <- matrix(y[as.character(tree$edge)], nrow(tree$edge), 
              ncol(tree$edge))
  cols <- viridis::viridis(1001)
  names(cols) <- 0:1000
  if (is.null(lims)) 
    lims <- c(min(y), max(y))
  trans <- 0:1000/1000 * (lims[2] - lims[1]) + lims[1]
  names(trans) <- 0:1000
  tree$maps <- vector(mode = "list", length = nrow(tree$edge))
  for (i in 1:nrow(tree$edge)) {
    XX <- cbind(c(H[i, 1], steps[intersect(which(steps > 
                                                   H[i, 1]), which(steps < H[i, 2]))]), c(steps[intersect(which(steps > 
                                                                                                                  H[i, 1]), which(steps < H[i, 2]))], H[i, 2])) - H[i, 
                                                                                                                                                                    1]
    YY <- rowMeans(XX)
    if (!all(YY == 0)) {
      b <- vector()
      for (j in 1:length(YY)) b[j] <- (A[i, 1]/YY[j] + 
                                         A[i, 2]/(max(XX) - YY[j]))/(1/YY[j] + 1/(max(XX) - 
                                                                                    YY[j]))
    }
    else b <- A[i, 1]
    d <- sapply(b, phytools:::getState, trans = trans)
    tree$maps[[i]] <- XX[, 2] - XX[, 1]
    names(tree$maps[[i]]) <- d
  }
  tree$mapped.edge <- phytools:::makeMappedEdge(tree$edge, tree$maps)
  tree$mapped.edge <- tree$mapped.edge[, order(as.numeric(colnames(tree$mapped.edge)))]
  class(tree) <- c("simmap", setdiff(class(tree), "simmap"))
  xx <- list(tree = tree, cols = cols, lims = lims)
  class(xx) <- "contMap"
  if (plot) 
    phytools:::plot.contMap(xx, fsize = fsize, ftype = ftype, lwd = lwd, 
                 legend = legend, outline = outline, sig = sig, type = type, 
                 mar = mar, direction = direction, offset = offset, 
                 hold = hold, leg.txt = leg.txt)
  invisible(xx)
}